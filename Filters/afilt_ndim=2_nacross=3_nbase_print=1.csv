 Multi-dimensional convolutional filters for solving PDEs with
 linear and higher order based methods.
 The higher order FEM are modified FEM approaches for convolutions.

 afilt_nxnx_isotropic.csv:
 The isotropic diffusion filter D^2.
 FORTRAN output code... then the actual output of the code...
 jrang=1+(nfilt_width-1)*jswitch
 krang=1+(nfilt_width-1)*kswitch
 do ibase=1,nbase_print
    do k=1,krang
    do j=1,jrang
       rsum_afilt_nxnx_overi(:)=0.0
       do idim=1,ndim
          rsum_afilt_nxnx_overi(:) = rsum_afilt_nxnx_overi(:) &
                                   + afilt_nxnx(idim,:,j,k,ibase)
       end do
       write(27,*) rsum_afilt_nxnx_overi(:)
    end do
    end do
 end do
  -5.5555555555806563E-003   5.5555555555590795E-002  -1.6666666666147495E-002   5.5555555555590795E-002  -5.5555555555806546E-003
   5.5555555555590795E-002 -0.35555555555543589      -0.73333333333580120      -0.35555555555543589        5.5555555555590788E-002
  -1.6666666666147509E-002 -0.73333333333580120        4.0000000000071338      -0.73333333333580120       -1.6666666666147509E-002
   5.5555555555590788E-002 -0.35555555555543589      -0.73333333333580120      -0.35555555555543594        5.5555555555590795E-002
  -5.5555555555806546E-003   5.5555555555590795E-002  -1.6666666666147495E-002   5.5555555555590795E-002  -5.5555555555806563E-003

 afilt_nxnx.csv:
 The isotropic diffusion filter D^2 but in the x-,y-, and z- directions only.
 jrang=1+(nfilt_width-1)*jswitch
 krang=1+(nfilt_width-1)*kswitch
 do ibase=1,nbase_print
 do idim=1,ndim
    do k=1,krang
    do j=1,jrang
       write(27,*) afilt_nxnx(idim,:,j,k,ibase)
    end do
    end do
 end do
 end do
  -2.7777777777903277E-003   4.4444444444429479E-002  -8.3333333333278303E-002   4.4444444444429479E-002  -2.7777777777903273E-003
   1.1111111111161314E-002 -0.17777777777771794       0.33333333333311327      -0.17777777777771794        1.1111111111161313E-002
   6.6666666667130808E-002  -1.0666666666689144        2.0000000000035669       -1.0666666666689144        6.6666666667130808E-002
   1.1111111111161313E-002 -0.17777777777771794       0.33333333333311321      -0.17777777777771794        1.1111111111161314E-002
  -2.7777777777903273E-003   4.4444444444429479E-002  -8.3333333333278303E-002   4.4444444444429479E-002  -2.7777777777903277E-003
  -2.7777777777903290E-003   1.1111111111161316E-002   6.6666666667130808E-002   1.1111111111161316E-002  -2.7777777777903273E-003
   4.4444444444429479E-002 -0.17777777777771794       -1.0666666666689144      -0.17777777777771794        4.4444444444429479E-002
  -8.3333333333278317E-002  0.33333333333311327        2.0000000000035669       0.33333333333311327       -8.3333333333278317E-002
   4.4444444444429479E-002 -0.17777777777771794       -1.0666666666689144      -0.17777777777771797        4.4444444444429479E-002
  -2.7777777777903273E-003   1.1111111111161316E-002   6.6666666667130808E-002   1.1111111111161316E-002  -2.7777777777903290E-003

 afilt_nxnx_all.csv:
 The isotropic entire diffusion filter Dxx, Dxy,  Dyx, Dyy etc.
 jrang=1+(nfilt_width-1)*jswitch
 krang=1+(nfilt_width-1)*kswitch
 do ibase=1,nbase_print
 do idim=1,ndim
 do jdim=1,ndim
    do k=1,krang
    do j=1,jrang
       write(27,*) afilt_nxnx_all(idim+(jdim-1)*ndim,:,j,k,ibase)
    end do
    end do
 end do
 end do
 end do
  -2.7777777777903277E-003   4.4444444444429479E-002  -8.3333333333278303E-002   4.4444444444429479E-002  -2.7777777777903273E-003
   1.1111111111161314E-002 -0.17777777777771794       0.33333333333311327      -0.17777777777771794        1.1111111111161313E-002
   6.6666666667130808E-002  -1.0666666666689144        2.0000000000035669       -1.0666666666689144        6.6666666667130808E-002
   1.1111111111161313E-002 -0.17777777777771794       0.33333333333311321      -0.17777777777771794        1.1111111111161314E-002
  -2.7777777777903273E-003   4.4444444444429479E-002  -8.3333333333278303E-002   4.4444444444429479E-002  -2.7777777777903277E-003
  -6.9444444444669200E-003   5.5555555555667935E-002  -6.5052130349130266E-018  -5.5555555555667935E-002   6.9444444444669209E-003
   5.5555555555667942E-002 -0.44444444444480408       -4.7704895589362195E-018  0.44444444444480413       -5.5555555555667935E-002
   2.1684043449710089E-019  -8.6736173798840355E-019   2.0274580625478933E-017  -5.5077470362263625E-017   4.7704895589362195E-018
  -5.5555555555667942E-002  0.44444444444480413       -1.7780915628762273E-017 -0.44444444444480413        5.5555555555667942E-002
   6.9444444444669191E-003  -5.5555555555667935E-002   2.1684043449710089E-019   5.5555555555667935E-002  -6.9444444444669191E-003
  -6.9444444444669191E-003   5.5555555555667935E-002   2.1684043449710089E-019  -5.5555555555667935E-002   6.9444444444669191E-003
   5.5555555555667942E-002 -0.44444444444480413       -1.7780915628762273E-017  0.44444444444480413       -5.5555555555667942E-002
   4.7704895589362195E-018  -5.5077470362263625E-017   2.0274580625478933E-017  -8.6736173798840355E-019   2.1684043449710089E-019
  -5.5555555555667935E-002  0.44444444444480413       -4.7704895589362195E-018 -0.44444444444480413        5.5555555555667942E-002
   6.9444444444669209E-003  -5.5555555555667935E-002  -6.5052130349130266E-018   5.5555555555667935E-002  -6.9444444444669200E-003
  -2.7777777777903290E-003   1.1111111111161316E-002   6.6666666667130808E-002   1.1111111111161316E-002  -2.7777777777903273E-003
   4.4444444444429479E-002 -0.17777777777771794       -1.0666666666689144      -0.17777777777771794        4.4444444444429479E-002
  -8.3333333333278317E-002  0.33333333333311327        2.0000000000035669       0.33333333333311327       -8.3333333333278317E-002
   4.4444444444429479E-002 -0.17777777777771794       -1.0666666666689144      -0.17777777777771797        4.4444444444429479E-002
  -2.7777777777903273E-003   1.1111111111161316E-002   6.6666666667130808E-002   1.1111111111161316E-002  -2.7777777777903290E-003

 afilt_nnx.csv:
 The gradient (advection) filters in the x-, y-, z- directions
 jrang=1+(nfilt_width-1)*jswitch
 krang=1+(nfilt_width-1)*kswitch
 do ibase=1,nbase_print
 do idim=1,ndim
    do k=1,krang
    do j=1,jrang
       write(27,*) afilt_nnx(idim,:,j,k,ibase)
    end do
    end do
 end do
 end do
  -2.7777777777768420E-003   2.2222222222187768E-002   0.0000000000000000       -2.2222222222187768E-002   2.7777777777768424E-003
   1.1111111111107370E-002  -8.8888888888751100E-002   0.0000000000000000        8.8888888888751086E-002  -1.1111111111107370E-002
   6.6666666666807151E-002 -0.53333333333380972        0.0000000000000000       0.53333333333380983       -6.6666666666807151E-002
   1.1111111111107370E-002  -8.8888888888751072E-002   0.0000000000000000        8.8888888888751100E-002  -1.1111111111107370E-002
  -2.7777777777768420E-003   2.2222222222187768E-002   0.0000000000000000       -2.2222222222187771E-002   2.7777777777768424E-003
  -2.7777777777768424E-003   1.1111111111107370E-002   6.6666666666807137E-002   1.1111111111107370E-002  -2.7777777777768424E-003
   2.2222222222187768E-002  -8.8888888888751100E-002 -0.53333333333380983       -8.8888888888751086E-002   2.2222222222187768E-002
   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
  -2.2222222222187768E-002   8.8888888888751086E-002  0.53333333333380983        8.8888888888751086E-002  -2.2222222222187768E-002
   2.7777777777768420E-003  -1.1111111111107371E-002  -6.6666666666807151E-002  -1.1111111111107370E-002   2.7777777777768424E-003

 afilt_nxn.csv:
 The conservative gradient (advection) filters in the x-, y-, z- directions
 jrang=1+(nfilt_width-1)*jswitch
 krang=1+(nfilt_width-1)*kswitch
 do ibase=1,nbase_print
 do idim=1,ndim
    do k=1,krang
    do j=1,jrang
       write(27,*) afilt_nxn(idim,:,j,k,ibase)
    end do
    end do
 end do
 end do
   2.7777777777768424E-003  -2.2222222222187771E-002   0.0000000000000000        2.2222222222187768E-002  -2.7777777777768420E-003
  -1.1111111111107370E-002   8.8888888888751100E-002   0.0000000000000000       -8.8888888888751072E-002   1.1111111111107370E-002
  -6.6666666666807151E-002  0.53333333333380994        0.0000000000000000      -0.53333333333380972        6.6666666666807151E-002
  -1.1111111111107370E-002   8.8888888888751086E-002   0.0000000000000000       -8.8888888888751086E-002   1.1111111111107370E-002
   2.7777777777768424E-003  -2.2222222222187768E-002   0.0000000000000000        2.2222222222187768E-002  -2.7777777777768420E-003
   2.7777777777768424E-003  -1.1111111111107370E-002  -6.6666666666807151E-002  -1.1111111111107371E-002   2.7777777777768420E-003
  -2.2222222222187768E-002   8.8888888888751072E-002  0.53333333333380994        8.8888888888751072E-002  -2.2222222222187768E-002
   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
   2.2222222222187768E-002  -8.8888888888751086E-002 -0.53333333333380972       -8.8888888888751086E-002   2.2222222222187768E-002
  -2.7777777777768424E-003   1.1111111111107370E-002   6.6666666666807137E-002   1.1111111111107370E-002  -2.7777777777768424E-003

 afilt_nn.csv:
 The consistent mass matrix filter.
 jrang=1+(nfilt_width-1)*jswitch
 krang=1+(nfilt_width-1)*kswitch
 do ibase=1,nbase_print
 do k=1,krang
 do j=1,jrang
    write(27,*) afilt_nn(:,j,k)
 end do
 end do
 end do
   1.1111111111067665E-003  -4.4444444444270668E-003  -2.6666666666627568E-002  -4.4444444444270660E-003   1.1111111111067665E-003
  -4.4444444444270668E-003   1.7777777777708264E-002  0.10666666666651028        1.7777777777708264E-002  -4.4444444444270668E-003
  -2.6666666666627564E-002  0.10666666666651027       0.64000000000062562       0.10666666666651027       -2.6666666666627564E-002
  -4.4444444444270668E-003   1.7777777777708264E-002  0.10666666666651028        1.7777777777708264E-002  -4.4444444444270668E-003
   1.1111111111067665E-003  -4.4444444444270660E-003  -2.6666666666627568E-002  -4.4444444444270668E-003   1.1111111111067665E-003

 afilt_ml.csv:
 The lumped mass term (scalar for this node/cell).
 do ibase=1,nbase_print
    write(27,*) sum(afilt_nn(:,:,:,ibase))
 end do
   1.0000000000000000     

 afilt_ml_check.csv:
 The lumped mass term (scalar for this node/cell).
 write(27,*) (2./real(nacross-1))**ndim
   1.0000000000000000     

 dxele_dim.csv:
 The dimensions of the hexahedra element.
 write(27,*) dxele_dim(:)
   2.0000000000000000        2.0000000000000000     

 integer_options_used.csv:
 write(27,*) nacross, ndim, iall_basis_funs, nbase_print
           3           2           0           1
